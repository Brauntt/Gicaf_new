from typing import Callable, List, Tuple, Optional, Type, Union
from interface.ModelBase import ModelBase
from interface.AttackBase import AttackBase
from interface.LoggerBase import LoggerBase
from abc import ABC, abstractmethod
from numpy import ndarray

class AttackEngineBase(ABC):

    @classmethod
    def version(cls) -> str: return "1.0"

    @abstractmethod
    def __init__(
        self, 
        data_generator: Callable[[None], Tuple[ndarray, int]], 
        model: Type[ModelBase], 
        attacks: List[Type[AttackBase]],
        targets: Optional[Union[List[int], ndarray]] = None,
        false_positive: bool = True,
        save: bool = True
    ) -> None: 
        """
        Initialize attack engine

        Parameters
        ----------
            data_generator : generator function
                Provides the samples loaded by the user
                Yields
                ------
                    x : numpy.ndarray
                        Image to use for attacks
                    y : int
                        Ground-truth of x 
            model : ModelBase
                Model to carry out attacks on
            attacks : list with elements of type AttackBase
                Attacks to carry out
            targets : list or numpy.ndarray with elements of type int
                The targeted class for each of the inputs, as such
                this list must be the same size as the number of 
                of samples generated by data_generator
            false_positive : bool
                Whether or not false positive attack experiments are to be carried out,
                if True wrong predictions are filtered out of the dataset. Default is True
            save : bool
                Whether to save the experiment logs on AttackEngine.close() 
        """
        ...

    @abstractmethod
    def run(
        self, 
        metric_names: Optional[List[str]] = None, 
        use_memory: bool = False,
        query_limit: int = 5000
    ) -> Tuple[List[Type[LoggerBase]], List[float]]: 
        """
        Runs the attack

        Parameters
        ----------
            metric_names : list with elements of type string
                The metric names of the visual metrics to be collected. Default is
                None
            use_memory : bool
                Indicates whether or not to transfer knowledge from successful
                attacks to subsequent images of the same class. Memory is not to
                be transfered between different attack methods. Default is False
        Returns
        -------
            loggers : list with elements of type LoggerBase
                The experiment logs
            success_rates : list with elements of type float
                The experiment adversarial success rates in percentage
        Note
        ----
            This method must call 'self.model.reset_query_count()' before each attack to
            reset the model's query count
        """
        ...

    @abstractmethod
    def get_logs(self) -> List[Type[LoggerBase]]:
        """
        Get experiment logs

        Returns
        -------
            loggers : list with elements of type LoggerBase
                The experiment logs
        """
        ...

    @abstractmethod
    def close(self) -> None: 
        """
        End of session clean up
        """
        ...
